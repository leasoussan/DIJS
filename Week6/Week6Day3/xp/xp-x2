SELECT film_id, title, l.name from film f 
JOIN language l
ON f.language_id = l.language_id
LIMIT 5

--     Use UPDATE to change the language of some films. Make sure that you use valid languages.
UPDATE film 
SET language_id=5 WHERE film_id=98

SELECT film_id, title, l.name from film f 
JOIN language l
ON f.language_id = l.language_id 
WHERE film_id = 85

--     Which foreign keys (references) are defined for the customer table? How does this affect the way in which we INSERT into the customer table?
-- STORE ID 
-- ADDRESS ID 
-- We will have to join table into the insert - inner requests

--     We created a new table called customer_review. Drop this table. Is this an easy step, or does it need extra checking?
DROP TABLE review
Easy Peasy 

--     Find out how many rentals are still outstanding (ie. have not been returned to the store yet).
SELECT Count(rental_id) From rental Where return_date IS NULL


--     Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)

SELECT f.title, f.rental_rate 
FROM film f
INNER JOIN inventory i  
	ON f.film_id = i.film_id 
	
INNER JOIN rental r
	ON i.inventory_id = r.inventory_id
	WHERE r.return_date IS NULL
	ORDER BY f.rental_rate DESC LIMIT 30



--     Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can’t remember their names. 
-- Can you help him find which movies he wants to rent?
--         The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.
SELECT title from film f
INNER JOIN film_actor fa 
ON f.film_id = fa.film_id
INNER JOIN actor a
ON fa.actor_id = a.actor_id
WHERE f.title ILIKE '%sumo wrestler%' AND a.first_name='Penelope' AND a.last_name='Monroe'

--         The 2nd film : A short documentary (less than 1 hour long), rated “R”.
SELECT f.title, f.rating, c.name, f.length from film f
INNER JOIN film_category fc 
ON f.film_id = fc.film_id 
Inner JOIN category c 
ON fc.category_id = c.category_id
WHERE c.name ilike 'documentary' AND f.length < 60 AND f.rating = 'R'

--         The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.
SELECT f.title, f.rental_rate, r.return_date from film f
INNER JOIN inventory i 
ON f.film_id = i.film_id 
Inner JOIN rental r 
ON i.inventory_id = r.inventory_id
JOIN customer c 
ON r.customer_id = c.customer_id
WHERE r.return_date BETWEEN '2005-07-28' AND '2005-08-01' AND f.rental_rate > 4 AND c.first_name iLIKE 'Matthew' AND c.last_name iLIKE 'Mahan'


--         The 4th film : His friend Matthew Mahan watched this film, as well. It had the word “boat” in the title or description, 
-- and it looked like it was a very expensive DVD to replace.

SELECT f.title, f.description, f.replacement_cost, c.first_name, c.last_name
FROM film f 
INNER JOIN inventory i 
ON f.film_id = i.film_id
JOIN rental  r
ON i.inventory_id = r.inventory_id
JOIN customer c
ON r.customer_id = c.customer_id
WHERE f.title iLIKE '%boat%' or f.description iLIKE '%boat%' AND c.first_name ='Matthew' AND c.last_name ='Mahan' 
ORDER BY f.replacement_cost DESC LIMIT 1

